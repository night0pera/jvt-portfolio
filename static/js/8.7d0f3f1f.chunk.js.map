{"version":3,"sources":["components/Section/index.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/DecoderText/index.js","components/Divider/index.js","components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js"],"names":["Section","forwardRef","as","Component","children","className","rest","ref","classNames","Heading","level","align","weight","clampedLevel","Math","min","max","Helmet","rel","href","GothamBold","crossorigin","Text","size","secondary","glyphs","CharType","DecoderText","text","start","delay","startDelay","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","aria-hidden","memo","Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","style","numToMs","defaultProps","TextArea","resize","onChange","minRows","maxRows","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","getComputedStyle","parseInt","paddingHeight","paddingTop","paddingBottom","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","aria-labelledby","aria-describedby","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","500","404","getStatusError","Error","name","appear","mountOnEnter","unmountOnExit","onEnter","reflow","durationXS","required","autoComplete","maxLength","errorStatus","Button","disabled","loading","loadingText","aria-live","iconHoverShift"],"mappings":"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","file":"static/js/8.7d0f3f1f.chunk.js","sourcesContent":["import { forwardRef } from 'react';\nimport classNames from 'classnames';\nimport './index.css';\n\nconst Section = forwardRef(\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\n      {children}\n    </Component>\n  )\n);\n\nexport default Section;\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\nimport './index.css';\n\nconst Heading = ({\n  children,\n  level = 1,\n  as,\n  align = 'auto',\n  weight = 'medium',\n  className,\n  ...rest\n}) => {\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\n\n  return (\n    <Fragment>\n      {/* Conditionally load the bold font weight because we use it less frequently */}\n      {weight === 'bold' && (\n        <Helmet>\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n          <style>\n            {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n          </style>\n        </Helmet>\n      )}\n      <Component\n        className={classNames(\n          className,\n          'heading',\n          `heading--align-${align}`,\n          `heading--level-${clampedLevel}`,\n          `heading--weight-${weight}`\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    </Fragment>\n  );\n};\n\nexport default Heading;\n","import classNames from 'classnames';\nimport './index.css';\n\nconst Text = ({\n  children,\n  size = 'm',\n  as: Component = 'p',\n  align = 'auto',\n  weight = 'auto',\n  secondary,\n  className,\n  ...rest\n}) => {\n  return (\n    <Component\n      className={classNames(\n        className,\n        'text',\n        `text--align-${align}`,\n        `text--size-${size}`,\n        `text--weight-${weight}`,\n        {\n          'text--secondary': secondary,\n        }\n      )}\n      {...rest}\n    >\n      {children}\n    </Component>\n  );\n};\n\nexport default Text;\n","import { useRef, useEffect, memo } from 'react';\nimport classNames from 'classnames';\nimport { usePrefersReducedMotion } from 'hooks';\nimport { spring, chain, delay, value } from 'popmotion';\nimport VisuallyHidden from 'components/VisuallyHidden';\nimport prerender from 'utils/prerender';\nimport './index.css';\n\n// prettier-ignore\nconst glyphs = [\n'074', '097', '121', '108', '111', '114', '100'\n];\n\nconst CharType = {\n  Glyph: 'glyph',\n  Value: 'value',\n};\n\nfunction shuffle(content, output, position) {\n  return content.map((value, index) => {\n    if (index < position) {\n      return { type: CharType.Value, value };\n    }\n\n    if (position % 1 < 0.5) {\n      const rand = Math.floor(Math.random() * glyphs.length);\n      return { type: CharType.Glyph, value: glyphs[rand] };\n    }\n\n    return { type: CharType.Glyph, value: output[index].value };\n  });\n}\n\nconst DecoderText = ({\n  text,\n  start = true,\n  delay: startDelay = 0,\n  className,\n  ...rest\n}) => {\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\n  const container = useRef();\n  const reduceMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    const containerInstance = container.current;\n    const content = text.split('');\n    let animation;\n\n    const renderOutput = () => {\n      const characterMap = output.current.map(item => {\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\n      });\n\n      containerInstance.innerHTML = characterMap.join('');\n    };\n\n    const springValue = value(0, position => {\n      output.current = shuffle(content, output.current, position);\n      renderOutput();\n    });\n\n    if (start && !animation && !reduceMotion && !prerender) {\n      animation = chain(\n        delay(startDelay),\n        spring({\n          from: 0,\n          to: content.length,\n          stiffness: 8,\n          damping: 5,\n        })\n      ).start(springValue);\n    }\n\n    if (reduceMotion) {\n      output.current = content.map((value, index) => ({\n        type: CharType.Value,\n        value: content[index],\n      }));\n      renderOutput();\n    }\n\n    return () => {\n      if (animation) {\n        animation.stop();\n      }\n    };\n  }, [reduceMotion, start, startDelay, text]);\n\n  return (\n    <span className={classNames('decoder-text', className)} {...rest}>\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\n    </span>\n  );\n};\n\nexport default memo(DecoderText);\n","import classNames from 'classnames';\nimport { numToMs } from 'utils/style';\nimport './index.css';\n\nconst Divider = ({\n  lineWidth,\n  lineHeight,\n  notchWidth,\n  notchHeight,\n  collapseDelay,\n  collapsed,\n  className,\n  style,\n}) => (\n  <div\n    className={classNames('divider', className)}\n    style={{\n      '--lineWidth': lineWidth,\n      '--lineHeight': lineHeight,\n      '--notchWidth': notchWidth,\n      '--notchHeight': notchHeight,\n      '--collapseDelay': numToMs(collapseDelay),\n      ...style,\n    }}\n  >\n    <div\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\n    />\n    <div\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n    />\n  </div>\n);\n\nDivider.defaultProps = {\n  lineWidth: '100%',\n  lineHeight: '2px',\n  notchWidth: '90px',\n  notchHeight: '10px',\n  collapsed: false,\n  collapseDelay: 0,\n};\n\nexport default Divider;\n","import { useRef, useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './TextArea.css';\n\nconst TextArea = ({\n  className,\n  resize = 'none',\n  value,\n  onChange,\n  minRows = 1,\n  maxRows,\n  ...rest\n}) => {\n  const [rows, setRows] = useState(minRows);\n  const [textareaDimensions, setTextareaDimensions] = useState();\n  const textareaRef = useRef();\n\n  useEffect(() => {\n    const style = getComputedStyle(textareaRef.current);\n    const lineHeight = parseInt(style.lineHeight, 10);\n    const paddingHeight =\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\n    setTextareaDimensions({ lineHeight, paddingHeight });\n  }, []);\n\n  const handleChange = event => {\n    onChange(event);\n\n    const { lineHeight, paddingHeight } = textareaDimensions;\n    const previousRows = event.target.rows;\n    event.target.rows = minRows;\n\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\n\n    if (currentRows === previousRows) {\n      event.target.rows = currentRows;\n    }\n\n    if (maxRows && currentRows >= maxRows) {\n      event.target.rows = maxRows;\n      event.target.scrollTop = event.target.scrollHeight;\n    }\n\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\n  };\n\n  return (\n    <textarea\n      className={classNames('textarea', className)}\n      ref={textareaRef}\n      onChange={handleChange}\n      style={{ '--resize': resize }}\n      rows={rows}\n      value={value}\n      {...rest}\n    />\n  );\n};\n\nexport default TextArea;\n","import { useState, useRef } from 'react';\nimport classNames from 'classnames';\nimport { TransitionGroup, Transition } from 'react-transition-group';\nimport TextArea from './TextArea';\nimport { useId } from 'hooks';\nimport { isVisible } from 'utils/transition';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { msToNum, numToPx } from 'utils/style';\nimport Icon from 'components/Icon';\nimport './index.css';\n\nconst Input = ({\n  id,\n  label,\n  hasValue,\n  value,\n  multiline,\n  className,\n  style,\n  error,\n  onBlur,\n  ...rest\n}) => {\n  const [focused, setFocused] = useState(false);\n  const generatedId = useId();\n  const errorRef = useRef();\n  const inputId = id || `input-${generatedId}`;\n  const labelId = `${inputId}-label`;\n  const errorId = `${inputId}-error`;\n  const InputElement = multiline ? TextArea : 'input';\n\n  const handleBlur = event => {\n    setFocused(false);\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  return (\n    <div\n      className={classNames('input', className, { 'input--error': !!error })}\n      style={style}\n    >\n      <div className=\"input__content\">\n        <label\n          className={classNames('input__label', {\n            'input__label--focused': focused,\n            'input__label--has-value': !!value,\n          })}\n          id={labelId}\n          htmlFor={inputId}\n        >\n          {label}\n        </label>\n        <InputElement\n          className=\"input__element\"\n          id={inputId}\n          aria-labelledby={labelId}\n          aria-describedby={!!error ? errorId : undefined}\n          onFocus={() => setFocused(true)}\n          onBlur={handleBlur}\n          value={value}\n          {...rest}\n        />\n        <div\n          className={classNames('input__underline', {\n            'input__underline--focused': focused,\n          })}\n        />\n      </div>\n      <TransitionGroup component={null}>\n        {!!error && (\n          <Transition timeout={msToNum(tokens.base.durationM)}>\n            {status => (\n              <div\n                className={classNames('input__error', `input__error--${status}`)}\n                id={errorId}\n                role=\"alert\"\n                style={{\n                  '--height': isVisible(status)\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                    : '0px',\n                }}\n              >\n                <div className=\"input__error-message\" ref={errorRef}>\n                  <Icon icon=\"error\" />\n                  {error}\n                </div>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default Input;\n","import './index.css';\n\nimport classNames from 'classnames';\nimport { Button } from 'components/Button';\nimport DecoderText from 'components/DecoderText';\nimport Divider from 'components/Divider';\nimport Heading from 'components/Heading';\nimport Icon from 'components/Icon';\nimport Input from 'components/Input';\nimport Section from 'components/Section';\nimport Text from 'components/Text';\nimport { tokens } from 'components/ThemeProvider/theme';\nimport { useFormInput, useRouteTransition, useScrollRestore } from 'hooks';\nimport { useCallback, useRef, useState } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Transition, TransitionGroup } from 'react-transition-group';\nimport prerender from 'utils/prerender';\nimport { msToNum, numToMs, numToPx } from 'utils/style';\nimport { isVisible, reflow } from 'utils/transition';\n\nconst initDelay = tokens.base.durationS;\n\nfunction getStatusError({\n  status,\n  errorMessage,\n  fallback = 'There was a problem with your request',\n}) {\n  if (status === 200) return false;\n\n  const statuses = {\n    500: 'There was a problem with the server, try again later',\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n  };\n\n  if (errorMessage) {\n    return errorMessage;\n  }\n\n  return statuses[status] || fallback;\n}\n\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n  const numDelay = msToNum(delayMs) * multiplier;\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\n}\n\nconst Contact = () => {\n  const { status } = useRouteTransition();\n  const errorRef = useRef();\n  const email = useFormInput('');\n  const message = useFormInput('');\n  const [sending, setSending] = useState(false);\n  const [complete, setComplete] = useState(false);\n  const [statusError, setStatusError] = useState('');\n  useScrollRestore();\n\n  const onSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      setStatusError('');\n\n      if (sending) return;\n\n      try {\n        setSending(true);\n\n        const response = await fetch('https://api.hamishw.com/message', {\n          method: 'POST',\n          mode: 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            email: email.value,\n            message: message.value,\n          }),\n        });\n\n        const responseMessage = await response.json();\n\n        const statusError = getStatusError({\n          status: response?.status,\n          errorMessage: responseMessage?.error,\n          fallback: 'There was a problem sending your message',\n        });\n\n        if (statusError) throw new Error(statusError);\n\n        setComplete(true);\n        setSending(false);\n      } catch (error) {\n        setSending(false);\n        setStatusError(error.message);\n      }\n    },\n    [email.value, message.value, sending]\n  );\n\n  return (\n    <Section className={classNames('contact', `contact--${status}`)}>\n      <Helmet>\n        <title>Contact | Jaylord Tagalan</title>\n        <meta\n          name=\"description\"\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\n        />\n      </Helmet>\n      <TransitionGroup component={null}>\n        {!complete && (\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\n            {status => (\n              <form className=\"contact__form\" method=\"post\" onSubmit={onSubmit}>\n                <Heading\n                  className={classNames('contact__title', `contact__title--${status}`, {\n                    'contact__title--hidden': prerender,\n                  })}\n                  level={3}\n                  as=\"h1\"\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\n                >\n                  <DecoderText\n                    text=\"Say hello\"\n                    start={status !== 'exited' && !prerender}\n                    delay={300}\n                  />\n                </Heading>\n                <Divider\n                  className={classNames(\n                    'contact__divider',\n                    `contact__divider--${status}`,\n                    { 'contact__divider--hidden': prerender }\n                  )}\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\n                />\n                <Input\n                  required\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationXS, initDelay)}\n                  autoComplete=\"email\"\n                  label=\"Your Email\"\n                  type=\"email\"\n                  maxLength={512}\n                  {...email}\n                />\n                <Input\n                  required\n                  multiline\n                  className={classNames('contact__input', `contact__input--${status}`, {\n                    'contact__input--hidden': prerender,\n                  })}\n                  style={getDelay(tokens.base.durationS, initDelay)}\n                  autoComplete=\"off\"\n                  label=\"Message\"\n                  maxLength={4096}\n                  {...message}\n                />\n                <TransitionGroup component={null}>\n                  {!!statusError && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                      {errorStatus => (\n                        <div\n                          className={classNames(\n                            'contact__form-error',\n                            `contact__form-error--${errorStatus}`\n                          )}\n                          style={{\n                            '--height': isVisible(errorStatus)\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\n                              : '0px',\n                          }}\n                        >\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\n                            <div className=\"contact__form-error-message\">\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\n                              {statusError}\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </Transition>\n                  )}\n                </TransitionGroup>\n                <Button\n                  className={classNames('contact__button', `contact__button--${status}`, {\n                    'contact__button--hidden': prerender,\n                    'contact__button--sending': sending,\n                  })}\n                  style={getDelay(tokens.base.durationM, initDelay)}\n                  disabled={sending}\n                  loading={sending}\n                  loadingText=\"Sending...\"\n                  icon=\"send\"\n                  type=\"submit\"\n                >\n                  Send Message\n                </Button>\n              </form>\n            )}\n          </Transition>\n        )}\n        {complete && (\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\n            {status => (\n              <div className=\"contact__complete\" aria-live=\"polite\">\n                <Heading\n                  level={3}\n                  as=\"h3\"\n                  className={classNames(\n                    'contact__complete-title',\n                    `contact__complete-title--${status}`\n                  )}\n                >\n                  Message Sent\n                </Heading>\n                <Text\n                  size=\"l\"\n                  className={classNames(\n                    'contact__complete-text',\n                    `contact__complete-text--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationXS)}\n                >\n                  I’ll get back to you within a couple days, sit tight\n                </Text>\n                <Button\n                  secondary\n                  iconHoverShift\n                  className={classNames(\n                    'contact__complete-button',\n                    `contact__complete-button--${status}`\n                  )}\n                  style={getDelay(tokens.base.durationM)}\n                  href=\"/\"\n                  icon=\"chevronRight\"\n                >\n                  Back to homepage\n                </Button>\n              </div>\n            )}\n          </Transition>\n        )}\n      </TransitionGroup>\n    </Section>\n  );\n};\n\nexport default Contact;\n"],"sourceRoot":""}